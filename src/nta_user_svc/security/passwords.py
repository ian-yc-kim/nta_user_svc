from typing import Optional
import logging

import bcrypt

from nta_user_svc.config import PASSWORD_HASH_ROUNDS

logger = logging.getLogger(__name__)


def hash_password(plain_password: str) -> str:
    """Hash a plain-text password using bcrypt and return the hashed password string.

    Each call uses a unique salt generated by bcrypt.gensalt.
    """
    try:
        if not isinstance(plain_password, str):
            raise TypeError("Password must be a string.")
        rounds = int(PASSWORD_HASH_ROUNDS)
        salt = bcrypt.gensalt(rounds=rounds)
        hashed = bcrypt.hashpw(plain_password.encode("utf-8"), salt)
        return hashed.decode("utf-8")
    except Exception as e:
        logger.error(e, exc_info=True)
        # Propagate exception so callers are aware hashing failed
        raise


def verify_password(plain_password: str, hashed_password: str) -> bool:
    """Verify a plain-text password against a bcrypt hashed password.

    Returns True if the password matches the hash, False otherwise.
    In case of invalid input or internal error, returns False and logs the error.
    """
    try:
        if not isinstance(plain_password, str) or not isinstance(hashed_password, str):
            return False
        return bcrypt.checkpw(plain_password.encode("utf-8"), hashed_password.encode("utf-8"))
    except Exception as e:
        logger.error(e, exc_info=True)
        return False


def validate_password_strength(password: str) -> Optional[str]:
    """Validate password strength.

    Requirements:
      - Minimum 8 characters
      - At least one letter
      - At least one number

    Returns None if the password is valid; otherwise returns a descriptive error message.
    """
    try:
        if not isinstance(password, str):
            return "Password must be a string."
        if len(password) < 8:
            return "Password must be at least 8 characters long."
        if not any(c.isalpha() for c in password):
            return "Password must contain at least one letter."
        if not any(c.isdigit() for c in password):
            return "Password must contain at least one number."
        return None
    except Exception as e:
        logger.error(e, exc_info=True)
        return "Password validation failed due to an internal error."
